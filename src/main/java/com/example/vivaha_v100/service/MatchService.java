package com.example.vivaha_v100.service;

import com.example.vivaha_v100.dto.MatchDTO;

import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.*;



@Service
public class MatchService {

    public static final int MATRIX1[][];
    static {
        MATRIX1 = new int[38][38];
        try{
            BufferedReader br = new BufferedReader(new FileReader("G:\\Capstone\\vivaha-v1.0.0\\src\\main\\java\\com\\example\\vivaha_v100\\service\\MATRIX1.csv"));
            String s1;
            String s2;
            int i = 0;
            while((s1=br.readLine()) != null){
                int j = 0;
                for(String s : s1.split(",")){
                    MATRIX1[i][j] = Integer.parseInt(s);
                    j++;
                }
                i++;
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    public static final int[][] MATRIX = {
            {0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12},
            {0,0,1,2,3,3,4,5,5,6,7,7,8,9,10,11,12,12,13,14,14,15,16,16,17,18,19,20,21,21,22,23,23,24,25,25,26,27},
            {1,1,28,34,27,18,23,22,27,19,19,21,30,25,21,27,18,13,11,13,22,27,22,16,24,12,12,27,25,28,27,20,20,15,18,14,24,25},
            {1,2,33,28,27,18,23,13,18,27,26,28,21,23,21,19,27,21,20,6,15,29,22,16,14,18,20,20,27,29,26,10,11,21,25,21,15,24},
            {1,3,28,29,28,19,10,15,21,21,22,23,26,22,17,21,22,16,16,19,28,17,20,14,19,24,24,19,14,16,13,26,26,28,20,16,18,11},
            {2,3,18,19,17,28,19,27,18,18,19,20,23,19,18,22,23,21,21,25,23,12,15,19,24,29,19,13,8,14,10,23,30,32,24,19,21,21},
            {2,4,21,22,9,19,28,34,25,24,23,24,24,12,11,25,27,25,26,20,20,16,10,14,27,22,13,20,11,17,17,20,27,25,31,26,25,17},
            {2,5,22,15,15,25,36,28,20,26,24,25,17,21,19,17,25,23,26,12,12,27,18,22,20,22,14,12,18,22,26,12,19,25,31,26,17,26},
            {3,5,26,18,19,16,27,20,28,34,32,19,10,13,22,20,28,30,33,19,13,27,19,13,11,13,21,18,24,20,23,8,10,18,24,25,16,25},
            {3,6,17,26,20,17,23,25,33,28,24,10,18,12,22,28,21,23,23,26,20,26,21,14,16,3,15,26,26,22,21,17,19,10,17,18,25,24},
            {3,7,18,26,21,18,23,23,31,25,28,14,21,15,21,27,21,23,23,24,18,26,21,14,21,6,12,26,26,22,23,17,19,10,17,18,27,25},
            {4,7,22,30,25,22,27,26,19,13,16,28,35,28,16,22,16,19,19,20,20,28,22,19,26,10,8,23,23,27,28,22,14,7,13,18,26,24},
            {4,8,31,23,26,23,26,19,10,20,23,35,28,28,18,16,25,28,28,12,12,28,21,18,18,20,17,13,24,28,26,13,5,15,20,25,19,27},
            {4,9,27,24,23,20,13,22,15,13,16,28,30,28,16,16,18,21,21,26,26,15,19,15,21,26,24,17,9,13,15,28,20,20,14,18,20,13},
            {5,10,21,21,17,19,12,21,24,23,22,15,18,15,28,30,26,17,17,23,25,13,17,21,24,31,25,21,11,6,17,18,25,26,19,16,17,12},
            {5,11,26,19,21,23,26,17,20,29,27,20,14,15,30,28,34,25,22,9,10,25,19,23,20,23,19,19,27,22,18,5,11,20,25,22,15,22},
            {5,12,17,28,22,24,28,25,28,22,21,14,23,17,26,34,28,19,17,15,17,25,18,21,29,16,9,27,28,23,20,12,19,13,17,14,25,22},
            {6,12,11,21,15,21,25,23,30,24,23,18,26,20,16,24,18,28,26,24,17,25,17,18,26,13,13,27,28,26,23,16,17,11,15,16,27,24},
            {6,13,9,19,15,21,26,27,34,24,24,18,27,20,16,22,16,25,28,27,20,27,18,19,27,12,13,26,27,25,25,18,21,8,17,18,26,26},
            {6,14,13,6,18,23,20,13,21,27,25,20,12,28,22,8,14,24,27,28,21,21,27,28,12,25,27,11,20,17,18,16,18,26,18,19,9,20},
            {7,14,22,14,27,22,19,10,14,20,18,20,11,25,25,11,17,16,19,20,28,28,34,23,7,20,27,11,20,24,25,24,19,26,19,12,3,13},
            {7,15,26,29,15,10,15,25,27,27,27,27,26,11,11,25,26,25,36,19,27,28,18,8,22,17,21,26,19,23,23,26,22,19,28,20,19,11},
            {7,16,22,22,19,14,9,17,19,20,21,20,21,16,17,19,17,16,17,26,34,20,28,17,17,20,27,19,12,16,16,30,25,26,21,14,12,5},
            {8,16,19,19,16,21,16,23,14,13,13,19,20,15,24,26,24,18,19,28,24,10,18,28,28,31,24,18,11,14,14,28,28,26,21,21,19,12},
            {8,17,26,17,20,25,30,22,11,17,20,26,19,20,26,24,32,27,26,11,7,23,17,27,28,30,26,18,25,28,28,14,12,21,27,27,20,27},
            {8,18,15,19,26,31,24,25,13,4,5,10,22,26,34,24,19,13,12,25,21,18,21,31,31,28,16,19,19,22,23,28,26,19,12,11,22,22},
            {9,19,13,20,24,20,14,15,23,16,13,8,17,22,24,19,10,15,14,28,28,23,28,23,16,15,28,27,25,16,17,21,29,22,15,15,24,27},
            {9,20,27,20,19,13,20,11,18,27,26,20,11,16,21,19,27,28,26,13,13,26,21,17,14,14,27,28,34,25,25,9,16,23,30,31,22,30},
            {9,21,24,27,14,9,11,18,24,27,27,21,22,8,11,27,28,29,27,21,21,18,13,9,22,17,25,34,28,19,15,16,13,23,29,30,31,21},
            {10,21,26,28,15,14,17,21,20,22,27,28,26,12,5,21,22,26,23,17,25,22,17,12,25,20,15,24,18,28,24,25,18,18,24,28,29,19},
            {10,22,24,26,10,10,18,24,25,22,23,27,25,13,4,18,20,25,24,19,27,23,17,12,26,20,15,23,15,25,28,21,21,18,25,30,29,22},
            {10,23,21,10,25,23,20,13,12,17,17,21,13,27,18,4,11,16,19,18,26,27,32,27,12,25,21,8,15,25,30,28,20,25,20,25,14,22},
            {11,23,21,10,25,29,26,19,13,18,18,12,4,18,24,11,18,16,19,18,20,21,26,27,12,25,25,15,22,17,20,18,28,33,27,17,6,14},
            {11,24,15,20,27,31,24,27,21,11,11,7,14,18,25,19,12,10,7,24,26,20,26,26,22,18,21,22,22,17,18,23,33,28,19,7,16,16},
            {11,25,16,24,19,23,30,29,23,16,17,11,18,12,18,24,16,14,14,18,20,25,22,22,24,11,11,29,28,23,23,21,28,19,28,16,21,18},
            {12,25,14,22,17,20,27,26,27,19,19,17,24,18,17,23,15,18,19,22,15,19,16,21,24,9,17,32,31,30,32,26,18,9,18,28,33,29},
            {12,26,24,16,19,22,26,17,17,27,27,25,18,20,18,16,26,29,27,11,4,20,13,18,18,21,25,23,32,32,31,15,7,17,23,33,28,33},
            {12,27,26,28,11,14,19,27,27,27,28,25,27,12,12,24,24,27,27,21,13,13,5,9,27,18,19,20,21,22,23,24,25,26,27,28,29,30}
    };

    public static int[][] getMatchedRows(MatchDTO matchDTO) {
        List<int[]> filtered = new ArrayList<>();

        if (!matchDTO.isGender()) {
            // row-wise check (gender = 0)
            for (int row = 0; row < MATRIX1.length; row++) {
                if (MATRIX1[row][0] == matchDTO.getRashi_id() &&
                        MATRIX1[row][1] == matchDTO.getNakshatra_id()) {

                    for (int col = 2; col < MATRIX1[row].length; col++) {
                        if (MATRIX1[row][col] > 20) {
                            filtered.add(new int[]{
                                    MATRIX1[0][col],   // row0 value at col
                                    MATRIX1[1][col],   // row1 value at col
                                    MATRIX1[row][col]  // value at col
                            });
                        }
                    }
                    break;
                }
            }
        } else {
            // column-wise check (gender = 1)
            for (int col = 0; col < MATRIX1[0].length; col++) {
                if (MATRIX1[0][col] == matchDTO.getRashi_id() &&
                        MATRIX1[1][col] == matchDTO.getNakshatra_id()) {

                    for (int row = 2; row < MATRIX1.length; row++) {
                        if (MATRIX1[row][col] > 20) {
                            filtered.add(new int[]{
                                    MATRIX1[row][0],   // col0 value at row
                                    MATRIX1[row][1],   // col1 value at row
                                    MATRIX1[row][col]  // value at row
                            });
                        }
                    }
                    break;
                }
            }
        }

        // âœ… Sort in descending order by the third element (value)
        filtered.sort((a, b) -> Integer.compare(b[2], a[2]));

        return filtered.toArray(new int[0][0]);
    }
}
